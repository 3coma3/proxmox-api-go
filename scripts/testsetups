#!/bin/bash

# TEST SETUP FUNCTIONS

# These functions perform housekeeping around the go test actions, adding logics
# needed for sequencing, combination, dependency, and interaction with the shell.
#
# Their names must begin with $setup_prefix, followed by the name of an action
# defined in the testActions map in the Go code. The variable $setup_prefix is
# defined in the CONFIGURATION section in runtests.sh
#
# They generally:
#   - receive currently a single parameter from runSequence, the number of times
#     this setup handler is being called
#   - obtain the target action name as a parameter or by reading their own name
#   - prepare any inputs and perform any interactions needed before the call
#   - run the target action and capture its output for further manipulation in
#     the global testoutput[] array (or fake the run, or omit it)
#   - read any outputs and perform any interactions needed after a call
#   - call setActionResult to conclude something about what was tested
#   - return back the setActionResult exit status


# Generic setups - these capture common behaviour

testsetup_default() {
    return
}

# FIXME: be able to accept target and flags from handlers
testsetup_simple() {
    local target="${FUNCNAME[1]##*${setup_prefix}}"

    # if caller is not a setup handler the target comes in the first argument
    if [[ "$target" == "${FUNCNAME[1]}" ]]; then
        target="$1" ; shift
    fi

    debugMessage "SETUP TARGET: $target"
    runAction $target $@
    setActionResult $target $?
}

testsetup_loop_all() {
    local target="${FUNCNAME[1]##*${setup_prefix}}" ;  debugMessage "SETUP TARGET: $target"
    local message="$1"

    [[ -n $message ]] && echo "$message"
    local flags result
    for vmid in "${!vms[@]}"; do
        flags="-vmid ${vmid}"

        runAction $flags $target
        result=$?
        setActionResult $target $result
        (( result )) && break
    done
    return $result
}

testsetup_stub() {
    local target=${FUNCNAME[1]##*${setup_prefix}}
    debugMessage "SETUP TARGET: $target"
    setActionResult $target STUB
}


# Concrete setups - these map to a single target Go test action to perform
for unit in node storage vm vmdevice configlxc configqemu client session; do
    . "$scriptdir/testsetups_$unit"
done
