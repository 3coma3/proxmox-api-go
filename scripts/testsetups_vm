#!/bin/bash

testsetup_vm_check() {
    testsetup_loop_all 'checking all created VMs and CTs'
}

testsetup_vm_getinfo() {
    local target=${FUNCNAME##*${setup_prefix}} ; debugMessage "SETUP TARGET: $target"

    debugMessage 'manual intervention needed'
    echo "Enter VM/CT ids to get info, an empty line ends the test"

    local vmid=''
    while read -p 'Get VM/CT info (enter to finish): ' vmid; do
        [[ -z "$vmid" ]] && break
        runAction $target $vmid
    done

    setActionResult $target MANUALLY_TESTED
}

testsetup_vm_findvm() {
    local target=${FUNCNAME##*${setup_prefix}} ; debugMessage "SETUP TARGET: $target"

    debugMessage 'manual intervention needed'
    echo "Enter VM/CT names to find, an empty line ends the test"

    local vmname=''
    while read -p 'Find VM/CT by name (enter to finish): ' vmname; do
        [[ -z "$vmname" ]] && break
        runAction $target $vmname
    done

    setActionResult $target MANUALLY_TESTED
}

testsetup_vm_getmaxvmid() {
    testsetup_stub
}

testsetup_vm_getnextvmid() {
    testsetup_simple
    local result=$? lines="${#lineoutput[*]}"

    (( result == 0 )) && {
        selectedid="${testoutput[$((lines-2))]}"
        echo "The new VMID from getnextid is: $selectedid"
    }

    return $result
}

testsetup_vm_createtemplate() {
    testsetup_stub
}

testsetup_vm_clone() {
    local runcount=$1 ; shift
    local target=${FUNCNAME##*${setup_prefix}}
    local flags="-vmid ${vms[$((runcount))]}"
    local arguments="${vmnames[$((runcount-1))]} $selectednode"

    vmnames[$runcount]="test-clonevm${runcount}"

    testsetup_simple $flags $target $arguments< <(vmJson ${vmnames[$runcount]})
}

testsetup_vm_delete() {
    local runcount=$1 ; shift
    local target=${FUNCNAME##*${setup_prefix}}
    local arguments="${vms[$((runcount-1))]}"

    echo 'Running the test action and capturing output'

    local -a output
    readarray -t output< <("$test_binary" $test_default_flags $target $arguments 2>&1)

    local line
    for line in "${!output[@]}"; do
      echo "${output[$line]}"
    done

    # set UPID for gettaskexitstatus
    local status="${output[$((line))]}"
    [[ "${status##*: }" == "true" ]] && {
        UPID="$(sed -r 's/^.*\"(UPID[^"]+)".*$/\1/' <<< ${output[$((line-2))]})"
    }
}

testsetup_vm_getconfig() {
    local runcount=$1 ; shift
    local target=${FUNCNAME##*${setup_prefix}}
    local arguments="${vms[$((runcount-1))]}"
    testsetup_simple $target $arguments
}

testsetup_vm_getstatus() {
    testsetup_loop_all 'Getting status of created VM/CTs'
}

testsetup_vm_setstatus() {
    local runcount=$1 ; shift
    local target=${FUNCNAME##*${setup_prefix}}
    local flags="-vmid ${vms[$((runcount-1))]}"

    # omit a second shutdown because it fails anyway and takes ages

    local status
    for status in start reset suspend resume stop; do
      testsetup_simple $flags $target $status
    done
}

testsetup_vm_start() {
    testsetup_loop_all 'Starting all created VM/CTs'
}

testsetup_vm_suspend() {
    testsetup_loop_all 'Suspending all created VM/CTs'
}

testsetup_vm_resume() {
    testsetup_loop_all 'Resuming all created VM/CTs'
}

testsetup_vm_reset() {
    testsetup_loop_all 'Resetting all created VM/CTs'
}

testsetup_vm_stop() {
    testsetup_loop_all 'Stopping all created VM/CTs'
}

testsetup_vm_shutdown() {
    testsetup_loop_all 'Shutting down all created VM/CTs'
}

testsetup_vm_waitforshutdown() {
    testsetup_stub
}

testsetup_vm_migrate() {
    testsetup_stub
}

testsetup_vm_getsnapshotlist() {
    testsetup_stub
}

testsetup_vm_createsnapshot() {
    testsetup_stub
}

testsetup_vm_deletesnapshot() {
    testsetup_stub
}

testsetup_vm_rollback() {
    local runcount=$1 ; shift
    local target=${FUNCNAME##*${setup_prefix}}
    local flags="-vmid ${vms[$((runcount-1))]}"

    cat<<EOF
For this test please take a snapshot of the VM ${vms[$((runcount-1))]} (${vmnames[$((runcount-1))]})
Once the snapshot is made, enter its name to attempt to rollback the VM
EOF

    local snapshot
    read -p 'Enter the name of the snapshot: ' snapshot
    testsetup_simple $flags $target "$snapshot"
}

testsetup_vm_createbackup() {
    testsetup_stub
}

testsetup_vm_movedisk() {
    local target=${FUNCNAME##*${setup_prefix}} ; debugMessage "SETUP TARGET: $target"

    debugMessage 'Manual intervention needed'
    cat<<EOF
These are the storages I got from the previous storage_getstoragelist test: ${storages[@]}
To which storage should I attempt to move disks?
EOF

    promptStorage "Enter storage name (${storages[0]}) " "${storage[0]}" 1
    selectedstorage_ct=$selectedstorage
    selectedstorage_vm=$selectedstorage

    local result flags disk storage vmtype
    for vmid in "${!vms[@]}"; do
        vmtype="${vms[$vmid]}"
        storage="selectedstorage_${vmtype}"
        disk='"disk": "virtio0"'; [[ "$vmtype" == "ct" ]] && disk='"volume": "rootfs"'

        local flags="-vmid ${vmid}"
        runAction $flags $target<<EOF
{
    ${disk},
    "storage": "${!storage}",
    "delete": true
}
EOF
 
        result=$?
        setActionResult $target $result
        (( result )) && break
    done
    return $result
}

testsetup_vm_resizedisk() {
    local target=${FUNCNAME##*${setup_prefix}} ; debugMessage "SETUP TARGET: $target"

    local arguments flags result disk vmtype size
    for vmid in "${!vms[@]}"; do
        vmtype="${vms[$vmid]}"
        disk='virtio0'; [[ "$vmtype" == "ct" ]] && disk='rootfs'

        size="$(( RANDOM % 5 + 1))G"
        flags="-vmid ${vmid}"
        arguments="$disk +$size"

        echo "Attempting to resize disk '$disk' by $size"
        runAction $flags $target $arguments
        result=$?
        setActionResult $target $result
        (( result )) && break
    done
    return $result
}


testsetup_vm_getspiceproxy() {
    local runcount=$1 ; shift
    local target=${FUNCNAME##*${setup_prefix}}
    local arguments="${vms[$((runcount-1))]}"
    testsetup_simple $target $arguments
}

testsetup_vm_monitorcmd() {
    local runcount=$1 ; shift
    local target=${FUNCNAME##*${setup_prefix}}
    local flags="-vmid ${vms[$((runcount-1))]}"

    cat<<EOF
For this test please enter lines with Qemu monitor commands to send to a VM
Watch the VM ${vms[$((runcount-1))]} (${vmnames[$((runcount-1))]}) and verify that the commands are affecting it
An empty line ends the test
EOF

    local command
    while read -p 'Enter monitor command (empty line to end the test): ' command; do
      [[ -z "$command" ]] && break
      testsetup_simple $flags $target "$command"
    done

}

testsetup_vm_sendkeysstring() {
    local runcount=$1 ; shift
    local target=${FUNCNAME##*${setup_prefix}}
    local flags="-vmid ${vms[$((runcount-1))]}"

    cat<<EOF
For this test please enter lines with strings to be sent to a Qemu VM
Open the console for the VM ${vms[$((runcount-1))]} (${vmnames[$((runcount-1))]}) and verify that the strings are appearing on the console
An empty line ends the test
EOF

    local line
    while read -p 'Enter string (empty line to end the test): ' line; do
      [[ -z "$line" ]] && break
      testsetup_simple $flags $target "$line"
    done
}

testsetup_vm_sshforwardusernet() {
    local runcount=$1 ; shift
    local target=${FUNCNAME##*${setup_prefix}}
    local arguments="${vms[$((runcount-1))]}"
    testsetup_simple $target $arguments
}

testsetup_vm_removesshforwardusernet() {
    local runcount=$1 ; shift
    local target=${FUNCNAME##*${setup_prefix}}
    local arguments="${vms[$((runcount-1))]}"
    testsetup_simple $target $arguments
}

testsetup_vm_getagentnetworkinterfaces() {
    testsetup_stub
}
